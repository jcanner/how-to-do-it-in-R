---
title: "Histograms"
format: live-html
engine: knitr
webr:
  packages: ['ggformula', 'palmerpenguins']
execute: 
  warning: false
  message: false
code-copy: true
code-overflow: wrap
toc: true
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}

## Getting Started

First, be sure you have installed `ggformula`. Remember, you only need to install the package once on your machine.

Then, be sure to load the package `ggformula`. Remember, you need to do this with each new Quarto/RMarkdown document or R Session.

```{webr}
#| label: setup
library(ggformula) #for graphs
```

### Data for Examples

As a reminder (see [Overview of Data Visualization](visualization-overview.qmd)), we will be using the `penguins` data from the `palmerpenguins` package:

```{r}
#| label: load-penguins
library(palmerpenguins)
```

Here is a snippet of the data:

```{r}
#| label: data-structure 
#| echo: false
library(checkdown)  #for questions
library(dplyr) #for slice_sample function
library(gt) #for table formatting
slice_sample(penguins, n = 5) |> 
  gt::gt() |> 
  gt::tab_header(title = "Palmer Penguins")
```

## Histograms with One Quantitative Variable

### Basic Code

For a single quantitative variable, `x`, here is the general structure for a histogram.

```{r}
#| label: one-var-structure
#| eval: false
gf_histogram(~x, 
             data = mydata)
```

Run the code below to see an example using the **quantitative** variable `bill_length_mm` from the `penguins` data. Then replace `bill_length_mm` with another quantitative variable from the `penguins` data (e.g. `bill_depth_mm`)

```{webr}
#| label: histogram-one
gf_histogram(~bill_length_mm, 
             data = penguins)
```

**Notice** the warning produced from running the code. This is just a warning that there were rows (penguins) ignored due to missing data for the variables visualized.

### Bin Widths

One of the features of a histogram is the **bin width**. The bin width is something that is automatically generated for most histogram functions, but it is not always ideal. You can add an *argument* to the R function `gf_histogram()` to modify the bin width.

```{r}
#| label: one-var-structure-bin
#| eval: false
gf_histogram(~ x, 
             data = mydata, 
             binwidth = 10)  #adjust this number
```

Run the code below to see an example using the **quantitative** variable `bill_length_mm` from the `penguins` data with a bin width of 5 (mm). Modify the bin width and see how it affects the histogram.

```{webr}
#| label: histogram-one-bins
gf_histogram(~bill_length_mm, 
             data = penguins, 
             binwidth = 5)
```

### Adding Labels

Descriptive labels are important for any visualization. We can always add them to any visualization by adding `xlab =` and `ylab =` to your function.

```{r}
#| label: one-var-structure-labels
#| eval: false
gf_histogram(~x, 
             data = mydata,
             xlab = "X Axis Label",
             ylab = "Y Axis Label",
             title = "Descriptive Title")
```

Add labels and a title to the histogram for `bill_length_mm`.

```{webr}
#| label: histogram-one-bins-add-labels
gf_histogram(~bill_length_mm, 
             data = penguins, 
             binwidth = 5)
```

### Other Modifications

We can add a few other modifications that purely aesthetic - just to make our graphs look nicer or easier to read.

#### Outlining the Bars

We can add a color that outlines the bars by telling R to outline the color of the bars in black.

```{r}
#| label: one-var-structure-bars-color
#| eval: false
gf_histogram(~x, 
             data = mydata,
             xlab = "X Axis Label",
             ylab = "Y Axis Label",
             title = "Descriptive Title",
             color = "black")
```

#### Filling the Bars with Color

We can add a color to fill the bars by telling R to fill the bars with a specified color either using a [built in color from R](https://r-charts.com/colors/) or using a [hex code for colors](https://htmlcolorcodes.com/color-picker/) .

```{r}
#| label: one-var-structure-bars-fill
#| eval: false
gf_histogram(~x, 
             data = mydata,
             xlab = "X Axis Label",
             ylab = "Y Axis Label",
             title = "Descriptive Title",
             fill = "darkcyan")
```

#### Changing the Theme

The package `ggformula` is built on top of another package called `ggplot2` and so any `ggplot2` function can be added to a `ggformula` generated graphic. For example, we can change the theme to a [built-in theme](https://ggplot2.tidyverse.org/reference/ggtheme.html).

Try changing the theme to the following graph:

```{webr}
#| label: histogram-one-theme
gf_histogram(~bill_length_mm, 
             data = penguins) +
  theme_light()
```

#### Try It Out: Modifications

Try adding some modifications for the histogram of `bill_length_mm`.

```{webr}
#| label: histogram-one-modify
gf_histogram(~bill_length_mm, 
             data = penguins)
```

## Histograms for Comparisons Across Groups

When we have a **quantitative** variable that has been measured across multiple groups, we may be interested in comparing histograms across the values/groups of a **categorical** variable. We can do this using two different features of data visualization:

-   Color Differences\
-   Facets

### Adding Color to Groups

Similar to changing the color of bars to a single color, we can use the `fill =` argument but instead specify our **categorical** variable `z`.

```{r}
#| label: one-var-color-var
#| eval: false
gf_histogram(~x, 
             data = mydata,
             fill = ~z) #don't forget the ~ before the variable name
```

Here is the histogram of `bill_length_mm` with color varied by `species` a categorical variable with values of Adelie, Chinstrap, and Gentoo. Modify the code below to change the fill color to another categorical variable such as `island` or `sex` and see what happens.

```{webr}
#| label: histogram-color-var
gf_histogram(~bill_length_mm, 
             fill = ~species,
             data = penguins)
```

### Faceting by Groups

Faceting in visualization is a tool that allows you to easily split up data across multiple panels of the same type. To do this in `ggformula` you add `| z` after the formula which conditions the graph on the **categorical** variable `z` and splits the graph by the groups/values of `z`.

```{r}
#| label: one-var-facet-var
#| eval: false
gf_histogram(~x | z, 
             data = mydata)
```

Here is the histogram of `bill_length_mm` with facets based on `species`, a categorical variable with values of Adelie, Chinstrap, and Gentoo. Modify the code below to change the facets to another categorical variable such as `island` or `sex` and see what happens. Try adding fill by the facet variable as well.

```{webr}
#| label: histogram-facet-var
gf_histogram(~bill_length_mm | species,
             data = penguins)
```

#### Using `ggplot2` to Control Facets

Unfortunately, the `ggformula` option for facets does not give you much control on how to organize the facets, so it might be useful to instead of a `ggplot2` option such as `facet_wrap()` or `facet_grid`. For example, here is an example using `facet_wrap()` that allows us to stack our facets into one column (`ncol = 1`). Look up the options for different facet functions and try other modification.

```{webr}
#| label: histogram-facet-var-ggplot2
gf_histogram(~bill_length_mm,
             data = penguins) +
  facet_wrap(~species, ncol = 1)
```

::: callout-note
## Check Your Understading: Histograms

#### Question 1. Which of the following characteristics of the distribution of values for a variable can be evaluated using a histogram?

```{r}
#| label: histogram-characteristics-q1
#| echo: false
check_question(answer = c("center", 
                          "symmetry/skew", 
                          "spread", 
                          "modality", 
                          "outliers"), 
               options = c("center", 
                           "symmetry/skew", 
                           "spread", 
                           "modality", 
                           "outliers"),
               right = "Great Job! Histograms allow us to observe all of these features",
               wrong = "Are you missing a feature of a distribution we can evaluate?",
               type = "checkbox", 
               button_label = "Check Your Answer")
```

#### 

```{r}
#| label: histogram-characteristics-q1-hint
#| echo: false
check_hint(hint_text = "Take a look at a histogram, is there any distribution feature you could not say something about?",
           hint_title = "Click Here for Hint",
           type = "onclick")
```

#### Question 2: Which of the following can we determine from the **y-axis** of a histogram?

```{r}
#| label: histogram-characteristics-q2
#| echo: false
check_question(answer = c("Number of Individuals in a B"), 
               options = c("Number of Individuals in a B"),
               right = "Great Job!",
               wrong = "Does the y-axis",
               type = "checkbox", 
               button_label = "Check Your Answer")
```

####

```{r}
#| label: histogram-characteristics-q2-hint
#| echo: false
check_hint(hint_text = "Does the y-axis represent a variable or a statistic", 
           hint_title = "Click Here for Hint",
           type = "onclick")
```
:::
