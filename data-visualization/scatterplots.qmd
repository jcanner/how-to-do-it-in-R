---
title: "Scatterplots"
format: live-html
engine: knitr
webr:
  packages: ['ggformula', 'palmerpenguins']
execute: 
  warning: false
  message: false
code-copy: true
code-overflow: wrap
toc: true
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}

## Getting Started

First, be sure you have installed `ggformula`. Remember, you only need to install the package once on your machine.

Then, be sure to load the package `ggformula`. Remember, you need to do this with each new Quarto/RMarkdown document or R Session.

```{webr}
#| label: setup
library(ggformula) #for graphs
```

### Data for Examples

As a reminder (see [Overview of Data Visualization](visualization-overview.qmd)), we will be using the `penguins` data from the `palmerpenguins` package:

```{r}
#| label: load-penguins
library(palmerpenguins)
```

Here is a snippet of the data:

```{r}
#| label: data-structure 
#| echo: false
library(dplyr)
library(gt)
slice_sample(penguins, n = 5) |> 
  gt::gt() |> 
  gt::tab_header(title = "Palmer Penguins")
```

## Scatterplots with Two Quantitative Variables

### Basic Code

To visualize the relationship between two **quantitative** variables `x` and `y`, here is the general structure for a scatterplot.

```{r}
#| label: scatter-structure
#| eval: false
gf_point(y ~ x, 
         data = mydata)
```

The `y` position will map to the y-axis, and the `x` position will map to the x-axis. 


Run the code below to see an example using the **quantitative** variables `bill_length_mm` and `bill_depth_mm` from the `penguins` data. Then flip the placement of the variables in the `y` and `x` positions. Then replace `bill_length_mm` with another quantitative variable from the `penguins` data (e.g. `flipper_length_mm`)

```{webr}
#| label: scatter-penguins
gf_point(bill_depth_mm ~ bill_length_mm, 
         data = penguins) 
```

**Notice** the warning produced from running the code. This is just a warning that there were rows (penguins) ignored due to missing data for the variables visualized.



### Adding Labels

Descriptive labels are important for any visualization. We can always add them to any visualization by adding `xlab =` and `ylab =` to your function. 

```{r}
#| label: one-var-structure-labels
#| eval: false
gf_point(y ~ x, 
         data = mydata,
         xlab = "X Axis Label",
         ylab = "Y Axis Label",
         title = "Descriptive Title") 
```

Add labels and a title to the histogram for `bill_length_mm`.

```{webr}
#| label: scatter-add-labels
gf_point(bill_depth_mm ~ bill_length_mm, 
         data = penguins)
```

### Other Modifications

We can add a few other modifications that purely aesthetic - just to make our graphs look nicer or easier to read.


#### Changing the Color of the Points

We can add a color to the points by telling R to color each point with a specified color either using a [built in color from R](https://r-charts.com/colors/) or using a [hex code for colors](https://htmlcolorcodes.com/color-picker/) .

```{r}
#| label: one-var-structure-point-color
#| eval: false
gf_boxplot(y ~ x, 
           data = mydata,
           xlab = "X Axis Label",
           ylab = "Y Axis Label",
           title = "Descriptive Title",
           color = "darkcyan") 
```

#### Changing the Theme

The package `ggformula` is built on top of another package called `ggplot2` and so any `ggplot2` function can be added to a `ggformula` generated graphic. For example, we can change the theme to a [built-in theme](https://ggplot2.tidyverse.org/reference/ggtheme.html). To connect `ggplot2` functions, we will use a `+` at the end of the line precedding the function.  

Try changing the theme to the following graph:

```{webr}
#| label: boxplot-one-theme
gf_point(bill_depth_mm ~ bill_length_mm,  
         data = penguins,
         color = "darkcyan") + #notice the plus +
  theme_light() #ggplot2 function
```


## Scatterplots for Comparisons Across Groups

When we have a **quantitative** variable that has been measured across multiple groups, we may be interested in comparing relationships across the values/groups of a **categorical** variable. We can do this by changing either the **color** and/or **shape** of our points based on the values/groups of the *categorical* variable, `z`.  

```{r}
#| label: three-var-scatter
#| eval: false
gf_point(y ~ x, 
         color = ~z,  #color is the best way
         shape = ~z, #shape is another way, you can do both
         data = mydata)  
```


Here is the scatterplot of `bill_length_mm` and `bill_depth_mm` with the color varied by `species`, a categorical variable with values of Adelie, Chinstrap, and Gentoo.  Modify the code below to change the fill color to another categorical variable such as `island` or `sex` and see what happens.  

```{webr}
#| label: three-var-scatterplot-color
gf_boxplot(bill_length_mm ~ bill_depth_mm. 
           color = ~species,
           data = penguins,
           xlab = "Add Variable X Information",
           ylab = "Add Variable Y Information")
```



## Overlaying a Linear Model  


$$\hat{y} = b_0 + b_1x$$


```{r}
#| label: scatter-structure-lm
#| eval: false
gf_point(y ~ x, 
         data = mydata) |> 
  gf_lm()
```




Run the code below to see an example using the **quantitative** variables `bill_length_mm` and `bill_depth_mm` from the `penguins` data with a linear model overlaid. How does the model change when you replace `bill_length_mm` with another quantitative variable from the `penguins` data (e.g. `flipper_length_mm`). Add the appropriate labels to the graph (note you only need to do this within the `gf_point()` function). 

```{webr}
#| label: scatter-penguins-lm
gf_point(bill_depth_mm ~ bill_length_mm, 
         data = penguins,
         xlab = "X Variable",
         ylab = "Y Variable") |> 
  gf_lm()
```




```{webr}
#| label: scatter-penguins-lm-species
gf_point(bill_depth_mm ~ bill_length_mm, 
         color = ~species,
         data = penguins) |> 
  gf_lm()
```